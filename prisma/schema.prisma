generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  providerAccountId String
  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  title           String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  stage           String           @default("Not Started")
  type            String
  contactId       String
  id              String              @id @default(cuid())
  brandingProject BrandingProject?
  Contacts        Contact          @relation(fields: [contactId], references: [id], onDelete: Cascade)
  webProject      WebProject?
  media           Media[]
}

model WebProject {
  id            String      @id @default(cuid())
  sitemap       String?
  wireframes    String?
  colorScheme   Json?
  typography    Json?
  responsive    Boolean?
  domain        String?
  githubLink    String?
  hostingLink   String?
  SEOstrat      String?
  integrations  Json?
  projectNotes  Json?
  pages         Json?
  expenses      Json?
  questionnaire String?
  quote         String?
  contract      String?
  invoice       String?
  projectId     String      @unique
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model BrandingProject {
  id        String     @id @default(cuid())
  projectId String     @unique
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Media {
  id        String   @id @default(cuid())
  url       String
  type      String
  name      String?
  projectId String
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Roles {
  name String @unique
  id   Int    @id @default(autoincrement())
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  createdAt     DateTime  @default(now())
  phoneNumber   String?
  image         String?
  emailVerified DateTime?
  updatedAt     DateTime  @default(now()) @updatedAt
  roleId        Int
  accounts      Account[]
  sessions      Session[]
}

model Contact {
  id           String    @id @default(cuid())
  name         String
  email        String
  phoneNumber  String
  companyName  String
  source       String?
  stage        String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  Project      Project[]
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}
